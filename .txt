APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:8GWLAuk760KbGr+/BNuN+3MEyWc+TbV4RQSzgwEFM/A=
APP_DEBUG=true
APP_URL=http://localhost

VITE_API_BASE_URL=http://localhost:8000

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3309
DB_DATABASE=partenariat04
DB_USERNAME=root
DB_PASSWORD=idrisssabbarmysql2002@@

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=cookie
SESSION_LIFETIME=120

SESSION_DOMAIN=localhost
# Essaie aussi SESSION_DOMAIN= (vide) si souci de cookies

SANCTUM_STATEFUL_DOMAINS=localhost:8000,localhost:5173,127.0.0.1:8000,127.0.0.1:5173

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"










 public function storeCart(Request $request)
{
    try {
        $user = auth()->user();
        if (!$user) {
            return response()->json(['message' => 'User not authenticated'], 401);
        }

        $client = \App\Models\Client::where('client_name', $user->name)->first();
        if (!$client) {
            return response()->json(['message' => 'Client not found for this user'], 404);
        }

        $common = [
            'client_id' => $client->id,
            'invoice_nature' => $request->input('invoice_nature', 'Standard'),
            'invoice_sale_point' => $request->input('invoice_sale_point', 'Web Store'),
            'invoiced_by' => $user->id, // You can use $user->name if that's what you want
            'invoiced_on' => now(),
            'ordered_by' => $user->id,
            'ordered_on' => now(),
        ];

        $orders = [];

        foreach ($request->products as $item) {
            $product = Product::where('id', $item['id'])->first();

            if (!$product || $product->product_stock_1 < $item['quantity']) {
                return response()->json([
                    'message' => 'Insufficient stock for product: ' . ($product->product_name ?? 'Unknown')
                ], 422);
            }

            $orderData = array_merge($common, [
                'product_id' => $item['id'],
                'product_sale_price' => $item['product_sale_price'],
                'product_discount_1' => $item['product_discount_1'] ?? 0,
                'quantity' => $item['quantity'],
            ]);

            $order = Order::create($orderData);
            $product->decrement('product_stock_1', $item['quantity']);

            $orders[] = $order;
        }

        return response()->json(['message' => 'Cart order placed', 'orders' => $orders], 201);
    } catch (\Exception $e) {
        Log::error('storeCart failed', [
            'message' => $e->getMessage(),
            'line' => $e->getLine(),
            'file' => $e->getFile(),
        ]);

        return response()->json(['message' => 'Error saving cart order: ' . $e->getMessage()], 500);
    }
}
